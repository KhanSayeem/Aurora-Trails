@model TourismApp.Models.ViewModels.TourPackageCreateVM
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Create Package";
}

<section class="space-y-8">
    <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
            <h1 class="heading">Create tour package</h1>
            <p class="section-subtitle">Craft a minimal, confident listing for your travellers.</p>
        </div>
        <a asp-action="MyPackages" class="btn-outline inline-flex items-center gap-2 px-5 py-2.5">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to packages
        </a>
    </div>

    <div class="card p-8">
        <form asp-action="Create" method="post" class="space-y-10">
            @Html.AntiForgeryToken()
            @if (!ViewData.ModelState.IsValid && ViewData.ModelState.ErrorCount > 0)
            {
                <div asp-validation-summary="All" class="rounded-2xl border border-rose-200 bg-rose-50 px-4 py-3 text-sm text-rose-600" role="alert"></div>
            }

            <div class="grid gap-8 lg:grid-cols-[1.6fr,1fr]">
                <div class="space-y-6">
                    <div class="form-field">
                        <label asp-for="Title" class="form-label">Tour title</label>
                        <input asp-for="Title" class="input text-base" placeholder="Enter tour title" />
                        <span asp-validation-for="Title" class="text-sm text-rose-500"></span>
                    </div>
                    <div class="form-field">
                        <label asp-for="Description" class="form-label">Description</label>
                        <textarea asp-for="Description" class="input-textarea" placeholder="Describe your tour package in detail"></textarea>
                        <span asp-validation-for="Description" class="text-sm text-rose-500"></span>
                    </div>
                    <div class="grid gap-4 sm:grid-cols-3">
                        <div class="form-field">
                            <label asp-for="DurationDays" class="form-label">Duration (days)</label>
                            <input asp-for="DurationDays" class="input" type="number" min="1" />
                            <span asp-validation-for="DurationDays" class="text-sm text-rose-500"></span>
                        </div>
                        <div class="form-field">
                            <label asp-for="Price" class="form-label">Price</label>
                            <div class="relative">
                                <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-slate-400">$</span>
                                <input asp-for="Price" class="input pl-8" type="number" step="0.01" min="0" />
                            </div>
                            <span asp-validation-for="Price" class="text-sm text-rose-500"></span>
                        </div>
                        <div class="form-field">
                            <label asp-for="GroupSizeLimit" class="form-label">Group size</label>
                            <input asp-for="GroupSizeLimit" class="input" type="number" min="1" />
                            <span asp-validation-for="GroupSizeLimit" class="text-sm text-rose-500"></span>
                        </div>
                    </div>
                </div>

                <div class="space-y-6">
                    <div class="form-field">
                        <label asp-for="ImagePath" class="form-label">Image path</label>
                        <input asp-for="ImagePath" class="input" placeholder="/images/yourphoto.jpg" id="imagePathInput" />
                        <p class="text-xs text-slate-400">Provide a relative path to your tour image (optional).</p>
                    </div>
                    <div class="rounded-2xl border border-slate-200 bg-slate-50 p-5">
                        <h3 class="text-sm font-semibold text-slate-700">Image preview</h3>
                        <img src="@Url.Content("~/images/placeholder.jpg")" asp-append-version="true" alt="Tour image preview" class="mt-3 h-48 w-full rounded-xl object-cover" id="imagePreview" />
                    </div>
                </div>
            </div>

            <div class="space-y-4">
                <div class="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
                    <div>
                        <h2 class="section-title text-xl">Tour dates</h2>
                        <p class="section-subtitle">Define multiple departures and capacities.</p>
                    </div>
                    <button type="button" class="btn-outline inline-flex items-center gap-2 px-4 py-2" data-add-date>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                        </svg>
                        Add date
                    </button>
                </div>

                <div class="table-shell">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Capacity</th>
                                <th class="text-right">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-slate-100" data-dates-table>
                        @for (int i = 0; i < Model.NewDates.Count; i++)
                        {
                            <tr>
                                <td class="px-4 py-3">
                                    <input asp-for="NewDates[@i].Date" class="input" type="date" />
                                </td>
                                <td class="px-4 py-3">
                                    <input asp-for="NewDates[@i].Capacity" class="input" type="number" min="1" />
                                </td>
                                <td class="px-4 py-3 text-right">
                                    <button type="button" class="btn-outline px-3 py-1 text-xs" data-remove-date>
                                        Remove
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="flex flex-col gap-3 sm:flex-row sm:justify-between">
                <a asp-action="MyPackages" class="btn-outline px-5 py-2.5 text-center">Cancel</a>
                <button type="submit" class="btn-primary px-5 py-2.5">Save package</button>
            </div>
        </form>
    </div>
</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const tableBody = document.querySelector('[data-dates-table]');
            const addButton = document.querySelector('[data-add-date]');

            function bindRemoveButtons(scope) {
                (scope || tableBody).querySelectorAll('[data-remove-date]').forEach(function (button) {
                    button.addEventListener('click', function () {
                        const row = button.closest('tr');
                        if (row) {
                            row.remove();
                            renumberRows();
                        }
                    });
                });
            }

            function renumberRows() {
                tableBody.querySelectorAll('tr').forEach(function (row, index) {
                    row.querySelectorAll('input').forEach(function (input) {
                        if (input.name.includes('NewDates[')) {
                            if (input.name.endsWith('.Date')) {
                                input.name = `NewDates[${index}].Date`;
                            } else if (input.name.endsWith('.Capacity')) {
                                input.name = `NewDates[${index}].Capacity`;
                            }
                        }
                    });
                });
            }

            function createRow(index) {
                const row = document.createElement('tr');
                row.className = 'divide-y divide-slate-100';
                row.innerHTML = `
                    <td class="px-4 py-3">
                        <input name="NewDates[${index}].Date" class="input" type="date" />
                    </td>
                    <td class="px-4 py-3">
                        <input name="NewDates[${index}].Capacity" class="input" type="number" min="1" />
                    </td>
                    <td class="px-4 py-3 text-right">
                        <button type="button" class="btn-outline px-3 py-1 text-xs" data-remove-date>Remove</button>
                    </td>`;
                bindRemoveButtons(row);
                return row;
            }

            addButton?.addEventListener('click', function () {
                const nextIndex = tableBody.querySelectorAll('tr').length;
                const row = createRow(nextIndex);
                tableBody.appendChild(row);
            });

            bindRemoveButtons();
        })();

        // Image preview functionality
        (function () {
            const imagePathInput = document.getElementById('imagePathInput');
            const imagePreview = document.getElementById('imagePreview');
            const placeholderSrc = '@Url.Content("~/images/placeholder.jpg")';

            function updateImagePreview() {
                const imagePath = imagePathInput.value.trim();
                if (imagePath) {
                    // If path starts with /, treat as relative to root
                    const fullPath = imagePath.startsWith('/') ? imagePath : '/' + imagePath;
                    imagePreview.src = fullPath;

                    // Handle image load error by falling back to placeholder
                    imagePreview.onerror = function() {
                        imagePreview.src = placeholderSrc;
                        imagePreview.onerror = null; // Prevent infinite loop
                    };
                } else {
                    imagePreview.src = placeholderSrc;
                    imagePreview.onerror = null;
                }
            }

            // Update preview on input change
            imagePathInput?.addEventListener('input', updateImagePreview);

            // Initialize preview if there's already a value
            if (imagePathInput?.value) {
                updateImagePreview();
            }
        })();
    </script>
}
